一、工具的使用：
1、谷歌浏览器下载软件图片时死机的解决办法：卸载输入法充电安装；切换输入法为系统自带的中文输入法进行下载
1、everything：搜索电脑中的文件
2、express：接口调试时启动的本地服务
3、谷歌应用商店：https://chrome.google.com/webstore/category/extensions
4、使用westorm拉项目时，在提交代码时，Git忽略规则，.gitignore梳理
注：一般来说每个Git项目中都需要有一个.gitignore文件，这个文件的作用就是告诉Git
哪些文件不需要添加到版本管理中，实际项目中，有很多都不需要版本管理，比如.idea，
4.1：/mtk/  过滤整个文件夹
4.2：*.zip  过滤所有.zip文件
4.3: /mtk/do.c 过滤某个具体文件
被过滤的文件不会出现在git仓库中，本地还有，只是在push的时候不会上传。
4.4.1 .gitignore还可以指定要将哪些文件添加到版本管理中：
只需要管理/mtk/目录中的one.txt文件，这个目录的其他文件都不需要，需要使用添加文件到版本管理
!*.zip  !/mtk/one.txt 把.zip的文件添加到版本当中

.gitignore配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为版本管理带来很大的便利
1)配置语法：
以斜杠/开头的表示目录
以星号*开头的表示通配多个字符
以问号?通配单个字符
以方括号[]包含单个字符的匹配列表
以叹号!表示不忽略(跟踪)匹配到文件或目录

.gitignore常用的配置
/build
/.idea
/.gradle
/local.properties
.gitignore

# 此为注释 – 将被 Git 忽略

*.a       # 忽略所有 .a 结尾的文件
!lib.a    # 但 lib.a 除外
/TODO     # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
build/    # 忽略 build/ 目录下的所有文件
doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt

1、小程序工具下载（4个代码编译工具）
https://cnodejs.org/topic/580f007deae2a24f34e67ead




前端开发中遇到的问题及解决办法：

UI设计稿导航栏的规范，128px

2018-08-06添加：
一、移动端开发使用vw单位做适配
meta标签
<meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=0"/>

根节点字体是28px,字体大小/28rem，布局大小/7.5(或6.4)vw

html {
    -webkit-text-size-adjust: 100%;
}

body {
    margin: 0;
}

@media screen and (min-width: 320px) and (max-width: 450px) {
    html {
        font-size: calc(28 / 7.5 * 1vw);
    }
}

一、javascript常用的dom操作网址
https://www.haorooms.com/post/js_dom_api

二、移动端开发使用rem单位做适配
/* 当用户在手机上修改字体尺寸时，保证布局页面基本布局不变 */
function setPxPerRem() { //自适应屏幕设置rem
    var dpr = 1;
    var cssEl = document.createElement('style');
    document.documentElement.firstElementChild.appendChild(cssEl);
    //把viewport分成10份的rem，html标签的font-size设置为1rem的大小
    var pxPerRem = document.documentElement.clientWidth * dpr / 10;
    cssEl.innerHTML = 'html{font-size:' + pxPerRem + 'px !important;}';
    document.getElementsByTagName('HTML')[0].setAttribute('rem', pxPerRem);
    //获取浏览器当前实际渲染的字体大小
    var realRem = parseInt(window.getComputedStyle(document.querySelector('html')).getPropertyValue('font-size'));
    cssEl.innerHTML = 'html{font-size:' + (pxPerRem * pxPerRem / realRem) + 'px !important;}';
}
setPxPerRem();

三、修改单选框、复选框的默认样式(使用图片代替单选的默认样式)
html5结构:
 <label>
    <input type="radio" name="visit_type" value="1" checked/>
    <span>参观小镇</span>
 </label>
 <label>
    <input type="radio" name="visit_type" value="2"/>
    <span>参加活动</span>
 </label>
 
css3样式：
label input[type="radio"],label input[type="checkbox"] {
	appearance: none;
	-webkit-appearance: none;
	outline: none;
	margin: 0;
}

label input[type="radio"]:after,label input[type="checkbox"]:after {
	background: url("/resource/recommend/image/icon_radio.png") center center;
}

label input[type="radio"]:checked:after,label input[type="checkbox"]:checked:after {
	background: url("/resource/recommend/image/icon_radio-checked.png") center center;
}

label input[type="radio"]:after, label input[type="radio"]:checked:after,label input[type="checkbox"]:after, label input[type="checkbox"]:checked:after {
	display: block;
	content: "";
	width: 3.46vw;
	height: 3.46vw;
	background-size: 100% 100%;
}


2018-08-08新增：
一、css3 渐变，背景图片定位可以写在一个样式当中
https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds
例子：
.body_panel {
    height: 37.33vw;
    color: #fff;
    padding-left: 3.2vw;
    background: url("../image/my-01.png"),url("../image/my-02.png"),linear-gradient(-45deg, #13d388 30%, #01af7d 100%);
    background-repeat: no-repeat, no-repeat, no-repeat;
    background-position: 37.86vw top, left bottom, left top;
    background-size: 38.93vw auto,100% 8.8vw,100% 100%;
}

2018-08-09新增：
子元素距离父元素上边距10px左右居中,使用margin:10px auto;不起作用，出现原因及解决方法：
margin塌陷：
父元素中的子元素使用margin:10px auto;时，子元素
（1）为父盒子设置border:1px transparent solid;，为外层添加border后父子盒子就不是真正意义上的贴合。
（2）为父盒子添加overflow：hidden；或者overflow:auto
（3）为父盒子设定padding值。

2018-08-14新增：
移动端列表滚动到底部分页
滚动的临界值：
第一页数据：滚动的高度+视窗的高度<=文档的高度
第二页数据：滚动的高度+视窗的高度>文档的高度，page+1请求第二页的数据
判断的条件：
window.addEventListener('scroll', function (e) {// 监听滚动事件

	if(window.screen.availHeight + window.scrollY > document.documentElement.scrollHeight - 10 
	&& window.screen.availHeight < document.documentElement.scrollHeight){
		page++;
		get_list_data();//获取列表数据
	}

}

显示加载中，数据加载完的提示样式：
.item_wrap:after {
	display: block;
	margin: 1.07142rem;
	font-size: .85rem;
	color: #999;
	text-align: center;
}

.item_wrap[data-is-loading="true"]:after {
	content: '加载中...';
}

.item_wrap[data-is-all="true"]:after {
	content: '没有更多数据了哦~';
}


页面结构：
<div class="item_wrap" data-page-total="0" data-next-page="1" data-is-loading="false" data-is-all="false">
</div>

移动端滚动到底部分页：
function loadMoreListData(loadDom, errorCal, completeCal) {
	if (loadDom.dataset.isLoading === 'true' || loadDom.dataset.isAll === 'true') {
		return
	}
	loadDom.dataset.isLoading = true;
	axios.get(host + url.charge_report_list, {
		params: {
			page: loadDom.dataset.nextPage,
			size: 7
		}
	})
		.then(function (res) {
			if (res.data.code == 200) {
				loadDom.dataset.nextPage = parseInt(loadDom.dataset.nextPage) + 1;
				loadDom.dataset.pageTotal = res.data.data.total;
				list_data(res.data.data.list);
				if (document.querySelectorAll('.item').length >= res.data.data.total) {
					loadDom.dataset.isAll = true;
				}
			}
		})
		.catch(errorCal).then(function () {
		loadDom.dataset.isLoading = false;
		completeCal && completeCal();
	});
}

// 列表
function list_data(data) {
	data.forEach(function (item) {
		document.querySelector('.item_wrap').insertAdjacentHTML('beforeend',`<div class="item"><div><div class="item_charging-time">${item.date.split('-').join('.')}</div><div class="item_charging-ways"><span class="red">${item.pay_money}</span><span>${item.pay_method==1?'月卡':''||item.pay_method==2?'次卡':''||item.pay_method==4?'余额':''||item.pay_method==8?'微信':''}</span><span>${item.time}</span><span>${item.device_name}</span></div></div></div>`)
	})
}

// 列表第一页数据：
loadMoreListData(document.querySelector('.item_wrap'));

// 列表滚动到底部时加载更多数据：
let status = false;
window.addEventListener('scroll', function (e) {

	if (!status) {
		window.requestAnimationFrame(function () {
			if (window.screen.availHeight + window.scrollY > document.documentElement.scrollHeight - 10 && window.screen.availHeight < document.documentElement.scrollHeight) {
				loadMoreListData(document.querySelector('.item_wrap'));
			}
			status = false;
		});
		status = true;
	}
});


window.screen.availWidth：返回当前屏幕宽度(空白空间)
wiodow.screen.availHeight：返回当前屏幕高度(空白空间)
wiodow.screen.width：返回当前屏幕宽度(分辨率值)
wiodow.screen.height：返回当前屏幕高度(分辨率值)
window.document.body.offsetHeight：返回当前网页高度
window.document.body.offsetWidth：返回当前网页宽度
js：获取浏览器基本信息
https://blog.csdn.net/WangJiangNan17214/article/details/70143737

2018-08-15新增：
在common.js中定义全局变量的两种方式：
定义一个host和url的对象，在页面中可以引用
方法一：
window.host = 'https://orenda.com.cn';
window.url = {
	"getListData":"/dadta/list"
};
方法二：
host = 'https://orenda.com.cn';
url = {
	"getListData":"/dadta/list"
};
页面中访问：console.log(host)

2018-08-15新增：
css3 loading动画
.modal_loading:before {
    content: '';
    display: block;
    position: absolute;
    left: 44.4vw;
    top: 71.2vw;
    width: 11.2vw;
    height: 11.2vw;
    background: url("../image/icon_loading.png") center center no-repeat;
    background-size: 100% 100%;
    -webkit-animation: twr-spin 2s infinite linear;
    animation: twr-spin 2s infinite linear;
}

@keyframes twr-spin {
    0% {
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg);
    }

    100% {
        -webkit-transform: rotate(359deg);
        transform: rotate(359deg);
    }
}


获取url参数：
let get_url_params = new URLSearchParams(location.search).get('article_id');
let url_params = new URLSearchParams(location.search);
let device_id = url_params.get('device_id');

隐藏div的几种方式：
方式一：
div{display:none;}
不占据空间，但是如果在布局为display:flex的div上使用此隐藏方式则不起作用，需要在display:flex的
最外层包裹一层div，再使用display:none的方式将其隐藏
方式二、方式三
visibility: hidden;或者opacity:0
此方式占据空间

2018-08-17新增：
修改input radio checkbox的默认选中状态：
 document.querySelector('.select-radio-balance>.select-radio>label:first-child>input[type=radio]').checked 
 = !(document.querySelector('.select-radio-balance>.select-radio>label:first-child>input[type=radio]').checked);


获取标签上的自定义属性 
<a class="btn" href="javascript:;" onclick="paymentMoney(event)" data-payment-type='2'></a>
function paymentMoney(e) {
	console.log(e.currentTarget.dataset.paymentType);
}


sort:
数组对象按照id值升序排列：
function sortId(a, b) {
	return a.id - b.id;
}
arr.sort(sortId)


2018-08-20新增：
标签都有默认行高，在测量上下边距的时，如果按照设计稿上的尺寸来会有不准，解决方法：
默认行高，如果文字确定是一行显示的话，设置line-height:100%;+设计稿实际边距。如果文字是多行显示的话，不设置
行高为100%,减少设计稿实际边距为合适距离即可。

定位配合css3动画使得div居中：
div{
	position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%,-50%);
    width: 39%;
    height: 5.5%;
}

html{
	-webkit-text-size-adjust: 100%;
}

iPhone和Android的浏览器纵向和横向模式皆有自动调节字体大小的功能，控制它的就是css中的-webkit-text-size-adjust
-webkit-text-size-adjust设为none或者100%关闭字体大小自动调整功能。


2018-08-23新增：
计数器：


} else if (res.data.data.status == 0) { // 充电中：页面显示字段

	document.querySelector('.circle-small>span:first-child').dataset.lastSeconds = getSecondcByStr(res.data.data.charge_length);//存放起始的秒数
	document.querySelector('.circle-small>span:first-child').dataset.countDownId = setInterval(countDown, 1000);//存放增加之后的秒数
	document.querySelector('.circle-small>span:first-child').textContent = res.data.data.charge_length;
}

// 计数器
function countDown() {
	const dom = document.querySelector('.circle-small>span:first-child');
	let lastSeconds = parseInt(dom.dataset.lastSeconds);//存放上一次的秒数
	lastSeconds += 1;//正计时器：上一次的秒数增加1，倒计时器：上一次的秒数减少1
	dom.textContent = numCampare(Math.floor(lastSeconds / 3600 % 60)) + ':' + numCampare(Math.floor(lastSeconds / 60 % 60)) + ':' + numCampare(lastSeconds % 60);
	dom.dataset.lastSeconds = lastSeconds;

}

// 数字小于10补0
function numCampare(num) {
	return num < 10 ? '0' + num : num;
}

// 将后台返回的时间戳转换生秒数
function getSecondcByStr(timeStr) {
	let timeStrArray = timeStr.split(':').map(function (time) {
		return parseInt(time);
	});
	return timeStrArray[0] * 3600 + timeStrArray[1] * 60 + timeStrArray[2];
}

2018-08-27新增：
小程序异步请求：
1、启动页。
2、把获取cms_code的接口写在首页的js里面。
3、在onLaunch和首页的js里面都写获取cms_code的接口。
4、在onLaunch里面写获取cms_code的接口，在首页的onLoad函数中写一个定时器。
5、在onLaunch里面引入promise.js。
app.js onLaunch中发生的请求有时会在首页app.js之后，解决办法，定时器：
app.js
onLaunch: function() {
  wx.login({
      ...继续请求自己服务端生成cmsCode，保存到客户端
  })
}
 
page.js(首页加载到页面)
onLoad: function() {
    let interval = setInterval(() => {
      if (wx.getStorageSync('cmsCode')) { // 判断已经有token了
        clearInterval(interval) // 清理定时器
        ...wx.request()... // 继续业务请求
      }
    }, 50)
}


2018-08-28新增：
一、javascript遍历对象、数组总结：
1、javascript遍历对象
1.1：使用Object.keys(obj)遍历
注：返回一个数组，包含对象自身的（不含继承）所有可枚举属性（不含Symbol属性）
eg:
let obj = { 'name': 'jf', 'work': 'code' };
Object.keys(obj).forEach(function(key){
	console.log(key,obj[key]);// 键名和键值
})

1.2：使用for..in..遍历
注：循环遍历对象自身和继承的可枚举属性（不含Symbol属性）
eg:
let obj = { '0': 'a', '1': 'b', '2': 'c' };
for(let i in obj){
	console.log(i,':',obj[i]);
}

1.3：使用Object.getOwnPropertyNames(obj)遍历
注：返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）
eg：
let obj = { '0': 'a', '1': 'b', '2': 'c' };
Object.getOwnPropertyNames(obj).forEach(function(key){
	console.log(key,obj[key]);
})

1.4：使用Reflect.ownKeys(obj)遍历
注：返回一个数组，包含对象自身的所有属性，不管属性名是Symbol或字符串，也不管是否可枚举
let obj = { '0': 'a', '1': 'b', '2': 'c' };
Reflect.ownKeys(obj).forEach(function(key){
	console.log(key,obj[key]);
})


2、javascript遍历数组
2.1：使用forEach遍历
eg：
let arr = [1,2,3,4];
arr.forEach(function(val,index){
	console.log(val,index);
})

2.2：for..in..遍历
let arr = ['张三','李四','王五'];
for(let i in arr){
	console.log(i,':',arr[i]);
}

2.3：使用for-of遍历
注：
不仅支持数组，还支持大多数类数组对象，例如DOM NodeList对象
也支持字符串遍历，它将字符串视为一系列的Unicode字符串来进行遍历
let arr = ['张三','李四','王五'];
for(let value of arr){
	console.log(value);
}

三、javascript循环遍历Nodelist Dom列表的四种方式

NodeList对象是dom节点的集合，document.querySelectorAll()和Node.childNodes返回的都是
NodeList对象，看起来很像数组却没有数组的方法，NodeList对象只有一个属性，length
方法：nodeList对象只有一个方法：item(index),返回index位置的dom节点对象

let nodeList = document.querySelectorAll('ul>li');

1、for循环
for(let i = 0;i<nodeList.length;i++){
	console.log(nodeList[i]);
}

2、Array的forEach函数
Array.prototype.forEach.call(nodeList,function(i){
	console.log(i);
})

3、Array的forEach函数
[].forEach.call(nodeList,function(item,index){
	console.log(item);
})

4、继承Array的forEach函数
NodeList.prototype.forEach = Array.prototype.forEach;
nodeList.forEach(function(item,index){
	console.log(item);
})


四、javascript去除空格
1、replace正则匹配方法
去除字符串内所有的空格：str = str.replace(/\s*/g,'');
去除字符串内两头的空格：str = str.replace(/^\s*|\s*$/g,"");
去除字符串内左侧的空格：str = str.replace(/^\s*/,""); 
去除字符串内右侧的空格：str = str.replace(/(\s*$)/g,"");

2、str.trim()方法
trim()方法用来删除字符串两端的空白字符并返回，trim()方法并不影响原来的字符串本身，
它返回一个新的字符串
缺陷：只能去除字符串两端的空格，不能去除中间的空格
单独去除左侧空格使用str.trimLeft()
单独去除右侧空格使用str.trimRight()


2018-08-30新增：
array的push()方法将一个或多个元素添加到数组的末尾，并返回新数组的长度
push方法具有通用性，该方法和call()或apply()一起使用，可应用在类似数组的
对象上。
合并两个数组Array.prototype.push.apply(arr1,arr2)，注意到第二个数组太大时不要用这个方法来合并数组，因为事实上
一个函数能够接受的参数个数是有限制的
let arr1 = [1,2,3];
let arr2 = [4,5,6];
//将第二个数组融合到第一个数组
Array.prototype.push.apply(arr1,arr2);


2018-09-28新增：
小程序冒泡事件：
target在事件流的目标阶段；currentTarget在事件流的捕获，目标及冒泡阶段。但事件流处于目标阶段，
target与currentTarget指向一样， 而当处于捕获和冒泡阶段的时候，target指向被单击的对象
而currentTarget指向当前事件活动的对象。在微信小程序中也可总结为：target指向发生事件的组件，
currentTarget指向绑定事件的组件。


2018-10-19 新增
tab切换(实现点击当前，当前的加下滑线，其余的有删除下划线，当前的高亮显示
思路：遍历所有的div，删除他们的active样式，再为当前的添加active
)
 function orderStatus(_this) {
        
        [].forEach.call(document.querySelectorAll('.tab-wtap>.tab'), function (item,index) {
            document.querySelectorAll('.tab-wtap>.tab')[index].classList.remove('active');
            
        });
        
        _this.classList.add('active');
    }
	
	
2018-10-24 新增
修改checkbox的默认样式
不使用input伪类来改变默认样式的原因：ios不兼容，出现黑边（漏出原生的复选框样式）
为了解决兼容性的问题，使用将input隐层的形式，如下：
css样式：

label input[type="checkbox"] {
	display: none;
}

label input[type="checkbox"] + span {
	display: inline-block;
	width: 4.53vw;
	height: 4.53vw;
	background: url("/static/my/mall/image/icon_checkbox.png") center center;
	background-size: 100% 100%;
}

label input[type="checkbox"]:checked + span {
	background: url("/static/my/mall/image/icon_checkbox-active.png") center center;
	background-size: 100% 100%;

}	

页面结构：
<label>
	<input type='checkbox' value='' name='' />
	<span></span>
	<span>全选</span>
</label>


2018-11-01 新增
使用原生的html和js和使用框架开发的不同之处：
一、使用html5、css3、javascript
1、使用html5、css3完成静态页面排版工作，使用javascript的dom操作完成
页面中的一些交互效果，dom.classList.add('style')、dom.classList.remove('style');
页面数据渲染：dom.insertAdjacentHTML('beforeend',`<div>${data.name}</div>`)
2、移动端的列表滚动到底部分页，使用javascript的监听滚动事件实现。
二、使用框架开发
1、使用框架开发，有专门的监听页面滚动到底部的事件，有页面列表渲染和条件判断的方法，降低开发难度


2018-11-13 新增
一、html5为input添加一键删除
1、实现的方式，input末尾必须添加require标记，这是h5的验证标记
2、准被一个用于显示删除按钮的dom元素，例如span
<div class="invite-code-panel">
	<input type="text" class="invite-code-input" placeholder="请输入..." required/>
	<span class="editable-clear-x">×</span>
</div>
3、css3控制按钮显示
a、删除按钮默认隐藏
b、通过:valid+可以控制当input输入内容后<span/>则显示
.invite-code-panel .editable-clear-x {
  right: 15px;
  display: none;
}

.invite-code-panel .invite-code-input:valid + .editable-clear-x {
  display: inline;
}


2018-11-14新增：
/**
 * 移动端长按事件ontouchstart="touchStart(this)" ontouchend="touchEnd(this)" ontouchmove="touchmove()" 
 * **/
let isStillTouch = false;
let isPress = false;

/**
 * 开始按:此功能注释
 * **/
function touchStart(_this) {
 isStillTouch = true;
 setTimeout(function () {
 longPress(_this);
 }, 500);

}

/**
 * 手释放，如果在500毫秒内就释放，则取消长按事件，此时可以执行onclick应该执行的事件:此功能注释
 * **/
function touchEnd(_this) {
 console.log('500毫秒内就释放onclick事件：');
 isStillTouch = false;
 if (isPress) {
 isPress = false;
 }
}

/**
 *  长按事件:此功能注释
 * **/
function longPress(_this) {
 console.log('长按事件：');
 console.log(_this.dataset);

 if (isStillTouch) {
  console.log("这里写长按时触发的事件");

 isPress = true;
 }
}

/**
 * 如果手指有移动，则取消所有事件，此时说明用户只是要移动而不是长按: 此功能注释
 * **/
function touchmove() {
 console.log('手指有移动取消所有事件：');
 isStillTouch = false;
 isPress = true;
 }








































