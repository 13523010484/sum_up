工具的使用：
everything：搜索电脑中的文件
express：接口调试时启动的本地服务

2018-08-06添加：
一、移动端开发使用vw单位做适配
根节点字体是28px,字体大小/28rem，布局大小/7.5(或6.4)vw

html {
    -webkit-text-size-adjust: 100%;
}

body {
    margin: 0;
}

@media screen and (min-width: 320px) and (max-width: 450px) {
    html {
        font-size: calc(28 / 7.5 * 1vw);
    }
}

二、移动端开发使用rem单位做适配
/* 当用户在手机上修改字体尺寸时，保证布局页面基本布局不变 */
function setPxPerRem() { //自适应屏幕设置rem
    var dpr = 1;
    var cssEl = document.createElement('style');
    document.documentElement.firstElementChild.appendChild(cssEl);
    //把viewport分成10份的rem，html标签的font-size设置为1rem的大小
    var pxPerRem = document.documentElement.clientWidth * dpr / 10;
    cssEl.innerHTML = 'html{font-size:' + pxPerRem + 'px !important;}';
    document.getElementsByTagName('HTML')[0].setAttribute('rem', pxPerRem);
    //获取浏览器当前实际渲染的字体大小
    var realRem = parseInt(window.getComputedStyle(document.querySelector('html')).getPropertyValue('font-size'));
    cssEl.innerHTML = 'html{font-size:' + (pxPerRem * pxPerRem / realRem) + 'px !important;}';
}
setPxPerRem();

三、修改单选框、复选框的默认样式(使用图片代替单选的默认样式)
html5结构:
 <label>
    <input type="radio" name="visit_type" value="1" checked/>
    <span>参观小镇</span>
 </label>
 <label>
    <input type="radio" name="visit_type" value="2"/>
    <span>参加活动</span>
 </label>
 
css3样式：
label input[type="radio"],label input[type="checkbox"] {
	appearance: none;
	-webkit-appearance: none;
	outline: none;
	margin: 0;
}

label input[type="radio"]:after,label input[type="checkbox"]:after {
	background: url("/resource/recommend/image/icon_radio.png") center center;
}

label input[type="radio"]:checked:after,label input[type="checkbox"]:checked:after {
	background: url("/resource/recommend/image/icon_radio-checked.png") center center;
}

label input[type="radio"]:after, label input[type="radio"]:checked:after,label input[type="checkbox"]:after, label input[type="checkbox"]:checked:after {
	display: block;
	content: "";
	width: 3.46vw;
	height: 3.46vw;
	background-size: 100% 100%;
}


2018-08-08新增：
一、css3 渐变，背景图片定位可以写在一个样式当中
https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds
例子：
.body_panel {
    height: 37.33vw;
    color: #fff;
    padding-left: 3.2vw;
    background: url("../image/my-01.png"),url("../image/my-02.png"),linear-gradient(-45deg, #13d388 30%, #01af7d 100%);
    background-repeat: no-repeat, no-repeat, no-repeat;
    background-position: 37.86vw top, left bottom, left top;
    background-size: 38.93vw auto,100% 8.8vw,100% 100%;
}

2018-08-09新增：
子元素距离父元素上边距10px左右居中,使用margin:10px auto;不起作用，出现原因及解决方法：
margin塌陷：
父元素中的子元素使用margin:10px auto;时，子元素
（1）为父盒子设置border:1px transparent solid;，为外层添加border后父子盒子就不是真正意义上的贴合。
（2）为父盒子添加overflow：hidden；或者overflow:auto
（3）为父盒子设定padding值。

2018-08-14新增：
移动端列表滚动到底部分页
滚动的临界值：
第一页数据：滚动的高度+视窗的高度<=文档的高度
第二页数据：滚动的高度+视窗的高度>文档的高度，page+1请求第二页的数据
判断的条件：
window.addEventListener('scroll', function (e) {// 监听滚动事件

	if(window.screen.availHeight + window.scrollY > document.documentElement.scrollHeight - 10 
	&& window.screen.availHeight < document.documentElement.scrollHeight){
		page++;
		get_list_data();//获取列表数据
	}

}

显示加载中，数据加载完的提示样式：
.item_wrap:after {
	display: block;
	margin: 1.07142rem;
	font-size: .85rem;
	color: #999;
	text-align: center;
}

.item_wrap[data-is-loading="true"]:after {
	content: '加载中...';
}

.item_wrap[data-is-all="true"]:after {
	content: '没有更多数据了哦~';
}


页面结构：
<div class="item_wrap" data-page-total="0" data-next-page="1" data-is-loading="false" data-is-all="false">
</div>

移动端滚动到底部分页：
function loadMoreListData(loadDom, errorCal, completeCal) {
	if (loadDom.dataset.isLoading === 'true' || loadDom.dataset.isAll === 'true') {
		return
	}
	loadDom.dataset.isLoading = true;
	axios.get(host + url.charge_report_list, {
		params: {
			page: loadDom.dataset.nextPage,
			size: 7
		}
	})
		.then(function (res) {
			if (res.data.code == 200) {
				loadDom.dataset.nextPage = parseInt(loadDom.dataset.nextPage) + 1;
				loadDom.dataset.pageTotal = res.data.data.total;
				list_data(res.data.data.list);
				if (document.querySelectorAll('.item').length >= res.data.data.total) {
					loadDom.dataset.isAll = true;
				}
			}
		})
		.catch(errorCal).then(function () {
		loadDom.dataset.isLoading = false;
		completeCal && completeCal();
	});
}

// 列表
function list_data(data) {
	data.forEach(function (item) {
		document.querySelector('.item_wrap').insertAdjacentHTML('beforeend',`<div class="item"><div><div class="item_charging-time">${item.date.split('-').join('.')}</div><div class="item_charging-ways"><span class="red">${item.pay_money}</span><span>${item.pay_method==1?'月卡':''||item.pay_method==2?'次卡':''||item.pay_method==4?'余额':''||item.pay_method==8?'微信':''}</span><span>${item.time}</span><span>${item.device_name}</span></div></div></div>`)
	})
}

// 列表第一页数据：
loadMoreListData(document.querySelector('.item_wrap'));

// 列表滚动到底部时加载更多数据：
let status = false;
window.addEventListener('scroll', function (e) {

	if (!status) {
		window.requestAnimationFrame(function () {
			if (window.screen.availHeight + window.scrollY > document.documentElement.scrollHeight - 10 && window.screen.availHeight < document.documentElement.scrollHeight) {
				loadMoreListData(document.querySelector('.item_wrap'));
			}
			status = false;
		});
		status = true;
	}
});


window.screen.availWidth：返回当前屏幕宽度(空白空间)
wiodow.screen.availHeight：返回当前屏幕高度(空白空间)
wiodow.screen.width：返回当前屏幕宽度(分辨率值)
wiodow.screen.height：返回当前屏幕高度(分辨率值)
window.document.body.offsetHeight：返回当前网页高度
window.document.body.offsetWidth：返回当前网页宽度
js：获取浏览器基本信息
https://blog.csdn.net/WangJiangNan17214/article/details/70143737

2018-08-15新增：
在common.js中定义全局变量的两种方式：
定义一个host和url的对象，在页面中可以引用
方法一：
window.host = 'https://orenda.com.cn';
window.url = {
	"getListData":"/dadta/list"
};
方法二：
host = 'https://orenda.com.cn';
url = {
	"getListData":"/dadta/list"
};
页面中访问：console.log(host)

2018-08-15新增：
css3 loading动画
.modal_loading:before {
    content: '';
    display: block;
    position: absolute;
    left: 44.4vw;
    top: 71.2vw;
    width: 11.2vw;
    height: 11.2vw;
    background: url("../image/icon_loading.png") center center no-repeat;
    background-size: 100% 100%;
    -webkit-animation: twr-spin 2s infinite linear;
    animation: twr-spin 2s infinite linear;
}

@keyframes twr-spin {
    0% {
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg);
    }

    100% {
        -webkit-transform: rotate(359deg);
        transform: rotate(359deg);
    }
}


获取url参数：
let get_url_params = new URLSearchParams(location.search).get('article_id');
let url_params = new URLSearchParams(location.search);
let device_id = url_params.get('device_id');

隐藏div的几种方式：
方式一：
div{display:none;}
不占据空间，但是如果在布局为display:flex的div上使用此隐藏方式则不起作用，需要在display:flex的
最外层包裹一层div，再使用display:none的方式将其隐藏
方式二、方式三
visibility: hidden;或者opacity:0
此方式占据空间

2018-08-17新增：
修改input radio checkbox的默认选中状态：
 document.querySelector('.select-radio-balance>.select-radio>label:first-child>input[type=radio]').checked 
 = !(document.querySelector('.select-radio-balance>.select-radio>label:first-child>input[type=radio]').checked);


获取标签上的自定义属性 
<a class="btn" href="javascript:;" onclick="paymentMoney(event)" data-payment-type='2'></a>
function paymentMoney(e) {
	console.log(e.currentTarget.dataset.paymentType);
}


sort:
数组对象按照id值升序排列：
function sortId(a, b) {
	return a.id - b.id;
}
arr.sort(sortId)



















































